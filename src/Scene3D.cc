#include <iomanip>
#include <fstream>
#include <stdexcept>
#include <algorithm>

#include "src/resources/shaders.h"
#include "src/include/Scene3D.h"
#include "src/include/GlfwManager.h"

void
Scene3D::load_shaders() {
    const std::vector<tdogl::Shader> shaders{
        tdogl::Shader(shader__vertex_3d, GL_VERTEX_SHADER),
        tdogl::Shader(shader__fragment, GL_FRAGMENT_SHADER)
    };
    program_ = std::make_shared<tdogl::Program>(shaders);
}

void
Scene3D::load_buffers() {
    // make and bind the VAO
    glGenVertexArrays(1, &vao_);
    glBindVertexArray(vao_);

    // make and bind the VBO
    glGenBuffers(1, &vbo_);
    std::cout << "load_buffers:: " << vbo_ << std::endl;
    glBindBuffer(GL_ARRAY_BUFFER, vbo_);
    glBufferData(GL_ARRAY_BUFFER, Algorithm::vsize(vertices_), vertices_.data(), GL_STATIC_DRAW);
    // connect the xyz to the "vert" attribute of the vertex shader
    glVertexAttribPointer(program_->attrib("vert"), 3, GL_FLOAT, GL_FALSE, 0, NULL);
    glEnableVertexAttribArray(program_->attrib("vert"));

    glGenBuffers(1, &elements_);
    GlfwManager::glProcessErrors();
    std::cout << "load_buffers:: " << elements_ << std::endl;
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elements_);
    GlfwManager::glProcessErrors();
    auto size_selected = sizeof (decltype(selected_)::value_type) * selected_.size();
    std::cout << "load_buffers:: size_selected = " << size_selected << std::endl;
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, size_selected, selected_.data(), GL_STATIC_DRAW);
    // glBufferData(GL_ELEMENT_ARRAY_BUFFER, size_selected, NULL, GL_STATIC_DRAW);
    GlfwManager::glProcessErrors();

    GLint size = 0;
    glGetBufferParameteriv(GL_ELEMENT_ARRAY_BUFFER, GL_BUFFER_SIZE, &size);
    GlfwManager::glProcessErrors();
    std::cout << "size = " << size << std::endl;

    // make and bind the VBO
    glGenBuffers(1, &colors_id_);
    std::cout << "load_buffers:: " << colors_id_ << std::endl;
    glBindBuffer(GL_ARRAY_BUFFER, colors_id_);
    glBufferData(GL_ARRAY_BUFFER, Algorithm::vsize(colors_), colors_.data(), GL_STATIC_DRAW);
    glVertexAttribPointer(program_->attrib("colr"), 3, GL_FLOAT, GL_FALSE, 0, NULL);
    glEnableVertexAttribArray(program_->attrib("colr"));

    // unbind the VAO
    glBindVertexArray(0);
}

void
Scene3D::init(std::shared_ptr<Arguments> args) {
    resize(args->width, args->height);
}

void
Scene3D::unload() {
    if (program_) {
        glDeleteBuffers(1, &vbo_);
        glDeleteBuffers(1, &elements_);
        glDeleteBuffers(1, &colors_id_);
        glDeleteVertexArrays(1, &vao_);
    }
}

void
Scene3D::reload() {
    auto algo = std::static_pointer_cast<Algo3D>(algo_);
    reset_points();
    algo->apply(vertices_, colors_, indices_, width_, height_, depth_)
        || std::cerr << "!apply" << std::endl;
    std::cout << "#indices: " << Manager::size2str(indices_.size()) << std::endl;
    load_buffers();
    glBindVertexArray(vao_);
    glBindBuffer(GL_ARRAY_BUFFER, colors_id_);
    glBufferData(GL_ARRAY_BUFFER, Algorithm::vsize(colors_), colors_.data(), GL_STATIC_DRAW);
    glBindVertexArray(0);
}

void
Scene3D::load(std::shared_ptr<Algorithm> algorithm) {
    Scene::load(algorithm);
    auto algo = std::static_pointer_cast<Algo3D>(algorithm);

    glEnable(GL_DEBUG_OUTPUT);
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    load_shaders();
    algo->apply(vertices_, colors_, indices_, width_, height_, depth_)
        || std::cerr << "!apply" << std::endl;
    std::cout << "#indices: " << Manager::size2str(indices_.size()) << std::endl;
    load_buffers();

    // camera_.setPosition(glm::vec3(0, -0.1, 3));
    // camera_.lookAt(glm::vec3(0,0,4));
    // camera_.setNearAndFarPlanes(0.1, 100.);
}

bool
Scene3D::update(std::shared_ptr<Manager> manager, float elapsedTime) {
    if (manager->args()->spin_shape) {
        degrees_rotated_ += elapsedTime * degrees_per_second_;;
        while (degrees_rotated_ > 360.0f)
            degrees_rotated_ -= 360.0f;
    }

    auto events = manager->getEvents();

    // move position of camera based on WASD keys, and XZ keys for up and down
    if (events->keyDown('S'))
        camera_.offsetPosition(elapsedTime * move_speed_ * -camera_.forward());
    else if (events->keyDown('W'))
        camera_.offsetPosition(elapsedTime * move_speed_ * camera_.forward());
    if (events->keyDown('A'))
        camera_.offsetPosition(elapsedTime * move_speed_ * -camera_.right());
    else if(events->keyDown('D'))
        camera_.offsetPosition(elapsedTime * move_speed_ * camera_.right());
    if (events->keyDown('Z'))
        camera_.offsetPosition(elapsedTime * move_speed_ * -glm::vec3(0,1,0));
    else if (events->keyDown('X'))
        camera_.offsetPosition(elapsedTime * move_speed_ * glm::vec3(0,1,0));
    if (events->keyPressed('O')) {
        camera_.setPosition(glm::vec3(0, -0.1, 3.8));
        camera_.lookAt(glm::vec3(0,0,4));
    }
    if (events->keyPressed(' '))
        manager->args()->spin_shape = !manager->args()->spin_shape;
    if (events->keyPressed('M'))
        manager->args()->move_window = !manager->args()->move_window;
    if (events->keyPressed('.')) { // '>'
        manager->args()->sliding_step_factor *= 2;
    }
    if (events->keyPressed(',')) { // '<'
        manager->args()->sliding_step_factor /= 2;
        if (manager->args()->sliding_step_factor == 0) {
            manager->args()->sliding_step_factor = 1;
        }
    }

    if (manager->args()->move_window || selected_.empty() || manager->slide_window()) {
        if (manager->args()->move_window)
            manager->slide_window_right();
        bool slid = manager->slide_window(selected_, indices_);
        if (manager->args()->move_window && !slid)
            manager->args()->move_window = !manager->args()->move_window;
    }

    auto mouse = manager->getMouse();
    mouse->getCursorPos();
    camera_.offsetOrientation(mouse->sensitivity * mouse->y, mouse->sensitivity * mouse->x);
    // reset the mouse, so it doesn't go out of the window
    mouse->setCursorPos(0, 0);
    mouse->scrollY = 0.0;

    return true;
}

void
Scene3D::render() {
    glClearColor(0, 0, 0, 0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // bind the program (the shaders)
    program_->use();

    program_->setUniform("camera", camera_.matrix());

    // set the "model" uniform in the vertex shader, based on degreesRotated
    auto rotated = glm::rotate(glm::mat4(), glm::radians(degrees_rotated_), glm::vec3(0,1,0));
    program_->setUniform("model", rotated);

    // bind the VAO
    glBindVertexArray(vao_);

    constexpr size_t SAMPLE = 999UL;

    // const VertIndices sels =
    //     {4805190, 4606278, 4605666, 14829173, 7725568, 29952, 87, 5701701, 4544322, 4343120, 5259862, 5656656, 5264952, 3690584, 5781514, 677888, 2560, 0, 2, 131072, 512, 0, 223, 14614529, 122624, 269, 851969, 68864, 321, 4259918, 5128521, 4804173, 5064966, 412928, 1536, 0, 255, 16711935, 16777215, 16777215, 16776960, 65280, 65, 4259918, 5128525, 5066310, 4607482, 16401932, 850432, 3072, 0, 0, 0, 0, 0, 0, 223, 14614529, 122624, 269, 851969, 68864, 356, 6553600, 25600, 0, 86, 5636176, 5264952, 3690528, 2111714, 14819340, 844288, 3072, 240, 15728740, 6615040, 25757, 10289153, 105770, 2752992, 14690817, 122894, 917761, 69182, 4063633, 9518664, 4755871, 10438731, 4956069, 10832804, 10790182, 2532513, 10561187, 10723792, 13673433, 14274696, 8968656, 13666322, 1232905, 594535, 6752622, 7235553, 14773877, 7725440, 8418688, 8421498, 8028160, 31378, 9568308, 3445382, 8795338, 13272766, 12503552, 48761, 7929984, 8419707, 8093873, 11631614, 16691579, 8126094, 9337790, 12488245, 3522190, 9319898, 14323346, 9624243, 11768341, 1422126, 3020170, 9055793, 3246669, 5058881, 4279656, 6832402, 1206432, 10490501, 8757384, 8947009, 4294720, 4211067, 8077323, 752488, 6818641, 5335180, 9195851, 4951200, 10505003, 2859084, 4991757, 871525, 6622464, 26075, 14352566, 11983844, 14988886, 5694627, 10704420, 2401115, 5973090, 6445873, 3236425, 4796908, 15485359, 11529348, 8695778, 14845029, 6677074, 5399816, 545376, 6293641, 9003131, 8096048, 3177342, 8270048, 14712507, 12312675, 6536067, 8610701, 9274160, 3182069, 16068658, 3339585, 4272668, 1851808, 10493178, 16424982, 1505821, 1906282, 6954425, 12151515, 14399997, 16636720, 3210673, 11612327, 10990068, 16033700, 10810581, 14001261, 7197997, 2977232, 13643051, 2871439, 9382798, 9342965, 16092682, 718203, 8063569, 5340003, 6508950, 9855873, 8492588, 2916634, 1715312, 7346801, 7434406, 10907934, 2008580, 269891, 4392040, 6832923, 1796125, 1907503, 3087687, 4665154, 4343662, 7225894, 2518745, 14231206, 10934651, 8103555, 8616778, 4883219, 1264371, 15930287, 11531127, 7843620, 2389952, 12592324, 12894288, 5293078, 1462296, 1578601, 6887485, 4024773, 12926337, 8504581, 360808, 6817206, 11954380, 13416142, 13552801, 10604244, 13935050, 13292674, 8571600, 13664805, 2478147, 4400553, 11092839, 6793626, 10118969, 3775148, 11286908, 8170633, 9010391, 14125344, 2152343, 9904189, 4036535, 12008803, 6534976, 4219853, 13451305, 2739461, 338292, 7603541, 5600345, 5854584, 7887115, 751836, 14420985, 16374903, 7862555, 1799957, 1383286, 7738853, 15037976, 1631634, 9574463, 4166256, 7356253, 6123697, 11623873, 12693958, 13025688, 10012282, 8034457, 10058272, 2136462, 9314384, 5279349, 7688374, 11957639, 8893967, 1017851, 16453524, 9763671, 5739670, 9852901, 15046148, 320782, 918598, 4591167, 4146865, 11616239, 15708475, 3927822, 932763, 10161774, 7248683, 2846360, 9972699, 14391408, 7396291, 12808341, 9814953, 11113948, 14461268, 5561516, 11293759, 4172874, 4865927, 8866387, 5474090, 2773771, 731712, 4197269, 9781262, 955813, 10817182, 10397033, 6921762, 2255271, 10953363, 9676568, 1610698, 13244585, 11127401, 6924621, 5073278, 8277274, 1736239, 3087006, 10366768, 3186356, 11808801, 2209007, 15671648, 6352840, 13131889, 7456912, 9466304, 12619791, 1032301, 7147460, 12872966, 443456, 4196066, 14827758, 15655571, 9694828, 7115743, 14642285, 7200518, 421320, 13108835, 6539282, 1205155, 10687014, 2532243, 9643744, 14717826, 8577196, 11305546, 4893830, 8800860, 6063815, 13065223, 509722, 1705825, 6363882, 15360343, 5761697, 10573684, 7643437, 2979064, 16264671, 14678082, 4382467, 213620, 7603176, 15234080, 2156753, 13705452, 15520223, 14674975, 2088792, 5775325, 14506234, 16440814, 15661771, 13364956, 14470007, 7855285, 11892497, 1160662, 14029255, 13096686, 15648705, 12709577, 13222354, 13814223, 13619958, 16174889, 2750178, 14821740, 7135888, 9464906, 4886663, 8866387, 5474090, 2773771, 731712, 4197269, 9781262, 955802, 10096182, 3578397, 1914515, 9641410, 12751783, 10994192, 1091336, 528503, 7800942, 7239491, 4419249, 11617225, 13218054, 444786, 7472641, 94890, 11141382, 436950, 14026387, 9688780, 13407178, 13290542, 3066531, 10694313, 11117385, 4827504, 7358734, 946422, 16125596, 10286621, 1940629, 9772323, 2331938, 2237244, 3941038, 11418727, 6794922, 11167566, 5155472, 9457306, 10129483, 4954780, 10242921, 6921351, 8874409, 11110293, 9808133, 365984, 10487114, 4890686, 4082328, 9977526, 11966520, 3716856, 16267425, 10614833, 3252552, 4731258, 8014033, 13728337, 5362094, 11424238, 15642268, 10284772, 14982155, 779413, 9767759, 5215565, 5066557, 4017597, 12402155, 15449456, 7400433, 15823008, 10547626, 11182314, 15379170, 14871121, 5366278, 414155, 13305400, 3721991, 473130, 2754315, 731712, 4197269, 9781262, 955814, 10882644, 5547542, 1463424, 8394274, 2261202, 13771493, 15061569, 4318616, 9978243, 8624233, 6914845, 1927546, 8002963, 9665212, 12358492, 6077486, 3038462, 16658167, 16252637, 14546899, 13884705, 2216940, 15475127, 12053624, 7911186, 1210619, 16454217, 4848490, 6965526, 1469131, 13309532, 6081403, 8084588, 7109563, 12282979, 6536067, 8610701, 9274160, 3182069, 16068658, 3339680, 10498739, 11772045, 9286453, 3509550, 3028448, 14691952, 7397476, 6582399, 8348868, 12877675, 7062767, 15690600, 6877134, 13527145, 6934148, 8677784, 9995270, 432157, 1902243, 10689953, 10593273, 16359736, 3733974, 14039230, 12506711, 5750491, 14374861, 13490947, 249340, 16515891, 3407008, 10498996, 11837449, 635984, 5245418, 15356005, 6679105, 4285800, 6832402, 1206415, 9376342, 5672759, 3626696, 13121465, 12175587, 14924122, 5956419, 4413963, 738191, 9374469, 364422, 8783174, 4622064, 15746673, 7467162, 10121694, 14588572, 10280630, 11967498, 702084, 8653474, 10650662, 2532010, 11150994, 9611968, 12620453, 10862666, 4892145, 15813241, 7991675, 8092097, 12680134, 13025688, 10012282, 8034457, 10058320, 5282138, 5918724, 285270, 5637341, 14505613, 9297240, 5803439, 11491365, 2469768, 8922509, 9275581, 12422610, 13811106, 10670818, 14852845, 15589945, 3796230, 407890, 5375546, 3822200, 7879317, 9795614, 2004384, 10493687, 16228421, 4585392, 11552113, 7450786, 10645973, 14000771, 8639765, 1409922, 8525269, 13992535, 5756212, 3430314, 11154618, 12233379, 10730051, 4432681, 2704138, 666108, 16517764, 8715415, 9929836, 7116656, 7367793, 7434406, 10907934, 2008742, 10886740, 5547542, 1463406, 7214839, 16215604, 3471190, 5649610, 13260436, 9751138, 6460661, 16081423, 1045929, 11079464, 2664880, 11544677, 6664263, 4679015, 6768451, 4417383, 6767606, 16148380, 10286713, 7969885, 6125970, 9592105, 2724532, 11807090, 7517337, 10056322, 8558919, 4686343, 477013, 5572462, 7230886, 10907150, 960196, 12848659, 1295590, 15078340, 12904020, 5555201, 87245, 13435186, 3329367, 5714480, 3168005, 340077, 7144897, 12676376, 1622470, 12982370, 6473467, 16474668, 2947922, 5385377, 10572500, 13935050, 13292674, 8571600, 13664805, 2478147, 4400553, 11092835, 6531458, 8545094, 4620844, 2901619, 7547944, 2650949, 4532354, 8537522, 11698751, 4174430, 6176643, 8609500, 14451523, 4447309, 5063547, 8080810, 11172711, 6793980, 16541514, 4914379, 13322768, 1100704, 10489904, 3186785, 6369502, 14573875, 3399194, 1717171, 11737730, 8565555, 3375848, 15217453, 3008648, 8924465, 3246242, 10629522, 9609760, 2134715, 12263523, 6536067, 8610701, 9274160, 3182069, 16068658, 3339680, 10498616, 3711176, 13121731, 12830894, 11453403, 14397163, 15457030, 453621, 16058068, 13956521, 11129968, 7383441, 9531483, 6001053, 10312452, 302510, 11404354, 4370041, 7946943, 12548507, 10207216, 15768530, 13824090, 5952049, 3234506, 13250926, 7260820, 9727673, 12162145, 6404557, 13459817, 6933927, 10971525, 8759264, 14714250, 9101363, 3377763, 6501148, 1860380, 1842281, 6888583, 8874409, 11110293, 9808133, 365984, 10487041, 106505, 590198, 7735747, 12809906, 11715450, 8041054, 6191778, 10640931, 2335391, 10429437, 16621397, 5635570, 15881607, 8909358, 3049244, 1846913, 8461437, 8225207, 12025135, 3127108, 4468597, 7685205, 5600705, 12670257, 3260806, 8794541, 11372095, 4173290, 15351626, 4909664, 6310430, 1990910, 16653945, 7994964, 5536138, 9065584, 7375470, 7237688, 3698270, 6174734, 941620, 3411651, 12793014, 11977472, 46592, 254, 16646399, 16776854, 9895932, 16553504, 2161852, 12328965, 376059, 16451067, 16513986, 12778331, 6013618, 11688875, 11252476, 16559028, 11861014, 1488101, 15013415, 2614537, 599984, 11536883, 15970429, 8254415, 13598203, 16502626, 6486830, 3039751, 470554, 1705961, 15276593, 3271032, 7876999, 8878103, 1542049, 10557416, 15245631, 4188273, 7421825, 8483197, 8225249, 14777804, 13427186, 15912063, 8385128, 6848389, 8742931, 1279291, 3871663, 11484034, 8564621, 9274088, 15240560, 7399432, 553076, 7604262, 2520161, 6366739, 1270056, 2626376, 4728878, 3033113, 1650176, 6522, 7995434, 2783787, 2828978, 11676476, 3977754, 1719345, 3218142, 14561650, 7528137, 13202063, 9423137, 2199465, 11084278, 16165213, 6157878, 3562797, 2962964, 1322338, 6427781, 8741383, 493037, 15533946, 8056112, 3176978, 1191980, 2888434, 15871068, 6091454, 12475504, 7388791, 7827567, 7305070, 7237396, 1339001, 7935149, 11368922, 14331165, 1956428, 4988401, 15813655, 1569125, 6625034, 681355, 9112243, 11766730};
    VertIndices sels;
    sels.reserve(SAMPLE);
    for (int i = 0; i < SAMPLE; ++i) {
        sels.emplace_back(i);
    }
    selected_.assign(sels.begin(), sels.end());
    // const Floats cols =
    //     {0.337255, 0.313726, 0.219608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.384314, 0, 0.615686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14902, 0.701961, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.305882, 0.301961, 0.27451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.313726, 0.219608, 0.12549, 0.270588, 0.258824, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.956863, 0.858824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.388235, 0, 0.615686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.384314, 0, 0.615686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.392157, 0, 0.615686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00392157, 0, 0.0509804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.388235, 0, 0.615686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.305882, 0.909804, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00392157, 0, 0.392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.305882, 0.286275, 0.301961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.87451, 0.00392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.219608, 0.815686, 0.352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.65098, 0.211765, 0.74902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.254902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.870588, 0.807843, 0.890196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    Floats cols;
    cols.reserve(4*SAMPLE);
    for (int i = 0; i < 4*SAMPLE; ++i) {
        cols.emplace_back(1.0f);
    }
    colors_.assign(cols.begin(), cols.end());

    // // send newly selected elements
    auto size_selected = sizeof (decltype(selected_)::value_type) * selected_.size();
    std::cout << "render:: size_selected = " << size_selected << std::endl;
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, size_selected, selected_.data(), GL_STATIC_DRAW);
    GlfwManager::glProcessErrors();

    std::ostringstream SSsels;
    for (size_t i = 0; i < std::min(selected_.size(), SAMPLE); ++i) {
        // SSsels << ", " << selected_[i];
    }
    std::cout << SSsels.str() << " = SSsels" << std::endl;

    // // draw only the VAO's points we colored
    auto mM = std::minmax_element(selected_.begin(), selected_.end());
    std::cout << "render:: min:" << *mM.first << " max:" << *mM.second << " #:" << selected_.size() << std::endl;
    glDrawRangeElements(GL_POINTS, *mM.first, *mM.second, selected_.size(), GL_UNSIGNED_INT, NULL);
    GlfwManager::glProcessErrors();

    // glDrawArrays(GL_POINTS, 0, n_points_);
    // glDrawElements(GL_POINTS, selected_.size(), GL_UNSIGNED_INT, selected_.data());

    GLint size = 0;
    glGetBufferParameteriv(GL_ELEMENT_ARRAY_BUFFER, GL_BUFFER_SIZE, &size);
    GlfwManager::glProcessErrors();
    std::cout << "size = " << size << " == " << 4*selected_.size() << std::endl;

    std::ostringstream SScols;
    SScols << std::setw(12) << "cols:" << colors_.size() <<" ";
    for (size_t i = 0; i < std::min(colors_.size(), 4*SAMPLE); ++i) {
        // SScols << ", " << colors_[i];
    }
    std::cout << SScols.str() << " = SScols" << std::endl;

    // unbind the VAO and the program
    glBindVertexArray(0);
    program_->stopUsing();
}
