on: push
name: Build
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BAZELISK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  build_on_ubuntu:
    name: Build on ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: sudo apt update && sudo apt-get install -y libgl1-mesa-dev xorg-dev
    - run: bazelisk build voidstar

  build_on_macos:
    name: Build on macos
    runs-on: macos-latest
    steps:
    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - uses: actions/checkout@v2
    - run: bazelisk build voidstar

  build_on_windows:
    name: Build on windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    # Trying to install & use GCC
    # From https://github.com/onqtam/doctest/pull/285/files
    - name: Install (Windows)
      shell: powershell
      run: |
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        scoop install ninja --global
        #if ("${{ matrix.compiler }}".StartsWith("clang")) {
        #  scoop install llvm --global
        #}
        #if ("${{ matrix.compiler }}" -eq "gcc") {
          # Chocolatey GCC is broken on the windows-2019 image.
          # See: https://github.com/DaanDeMeyer/doctest/runs/231595515
          # See: https://github.community/t5/GitHub-Actions/Something-is-wrong-with-the-chocolatey-installed-version-of-gcc/td-p/32413
          scoop install gcc --global
          echo "::set-env name=CC::gcc"
          echo "::set-env name=CXX::g++"
        #} elseif ("${{ matrix.compiler }}" -eq "clang") {
        #  echo "::set-env name=CC::clang"
        #  echo "::set-env name=CXX::clang++"
        #} else {
        #  echo "::set-env name=CC::${{ matrix.compiler }}"
        #  echo "::set-env name=CXX::${{ matrix.compiler }}"
        #}
        # Scoop modifies the PATH so we make the modified PATH global.
        echo "::set-env name=PATH::$env:PATH"
    - name: Configure x64
      run: .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

    - shell: bash
      run: |
        gcc --version || true
        clang --version || true

    - run: bazelisk build voidstar
