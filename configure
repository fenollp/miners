#!/bin/bash

#------------------------------------------------------------------------------
#                               QUALITY
#------------------------------------------------------------------------------
set -o errexit
set -o pipefail
# set -o xtrace

__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file_path="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__file="$(basename $__file_path)"
__build_dir="build"

#------------------------------------------------------------------------------
#                               SCRIPT LOGIC
#------------------------------------------------------------------------------

# create build dir
mkdir -p "$__dir/$__build_dir"

# parsing option
OPTIND=1
compilers=(clang++ g++)
build_types=(DEBUG RELEASE)
sanitizers=(address thread memory leak undefined)

# default values
compiler=''
for comp in "${compilers[@]}"; do
    which "$comp" >/dev/null && compiler="$comp" && break
done
prefix="/usr/local"
build_type="${build_types[0]}"
sanitizer_answer=1

#------------------------------------------------------------------------------
#                               USAGE
#------------------------------------------------------------------------------
usage ()
{
    echo "./$__file [-h] [-c compiler] [-p prefix] [-b build_type] [-s sanitizers]"
    echo
    echo "  -h      This help"
    echo "  -c      Select compiler (($compiler) ${compilers[@]})"
    echo "  -p      Select install prefix ($prefix)"
    echo "  -b      Select build type (($build_type) ${build_types[@]})"
    echo "  -s      Enable compiler sanitizers flag (${sanitizers[@]})"
    echo
}

MATCHED=''
function match() {
    local opt="$1"
    local OPTARG="$2"
    declare -a range=("${!3}")
    local selected=''
    for value in "${range[@]}"; do
        [[ "$value" == "$OPTARG" ]] && selected="$value" && break
    done
    if [[ "$selected" == '' ]]; then
        usage
        echo "Unmatched -$opt '$OPTARG'. Try one of:"
        printf '\t%s\n' "${range[@]}"
        exit 1
    fi
    MATCHED="$selected"
}

until [[ "$1" == '' ]]; do
    while getopts ':cpbs:h:' opt; do
        case $opt in
            'h') usage && exit 0 ;;

            'c')
                match $opt "$2" compilers[@]
                compiler="$MATCHED"
                # better to remove the build dir and recreate it
                # when changing the compiler
                rm -rf "$__dir/$__build_dir"
                mkdir -p "$__dir/$__build_dir"
                ;;

            'p')
                new_prefix="$2"
                if [[ ! -d "$new_prefix" ]]; then
                    echo "Unmatched -$opt '$new_prefix':"
                    echo -e "\tPath is not a directory"
                    exit 2
                fi
                prefix="$new_prefix"
                ;;

            'b')
                match $opt "$2" build_types[@]
                build_type="$MATCHED"
                ;;

            's')
                dialog --backtitle "Compiler sanitizers configuration" \
                       --checklist "Choose the sanitizer you want to use:" 0 0 10 \
                       1 "${sanitizers[0]}" on \
                       2 "${sanitizers[1]}" off \
                       3 "${sanitizers[2]}" off \
                       4 "${sanitizers[3]}" off \
                       5 "${sanitizers[4]}" off \
                       2>/tmp/$$_dialog.ans

                sanitizer_answer=$(cat /tmp/$$_dialog.ans && rm -f /tmp/$$_dialog.ans)
                selected_sanitizers=()
                if [ "$sanitizer_answer" = "" ]; then
                    echo "Project Configuration Cancelled."
                    exit 1
                else
                    for i in $sanitizer_answer; do
                        idx=$(( $i - 1 ))
                        # push to array
                        selected_sanitizers+="${sanitizers[$idx]} "
                    done
                    # make CMake list struct
                    selected_sanitizers=$( echo "${selected_sanitizers[@]% }" | sed -e 's/ /;/g')
                fi
                ;;
        esac
        shift 2
        OPTIND=1
    done
done

# CMAKE
#################
cd "$__dir/$__build_dir" && \
    cmake .. \
          -DCMAKE_CXX_COMPILER="$(which "$compiler")" \
          -DCMAKE_BUILD_TYPE="$build_type" \
          -DCMAKE_INSTALL_PREFIX="$prefix" \
          -DCOMPILER_SANITIZER="$selected_sanitizers"
